Abstract:

package Corejavaphase1;


		abstract class Shape  
		{ 
		    String color; 
		    abstract double area(); 
		    public abstract String toString(); 
		    public Shape(String color) 
		    { 
		        System.out.println("Shape constructor called"); 
		        this.color = color; 
		    } 
		    public String getColor() 
		    { 
		        return color; 
		    } 
		} 
		class Circle extends Shape 
		{ 
		    double radius; 
		    public Circle(String color,double radius) 
		    { 
		        super(color); 
		        System.out.println("Circle constructor called"); 
		        this.radius = radius; 
		    }
		    @Override
		    double area() 
		    { 
		        return Math.PI * Math.pow(radius, 2); 
		    } 
		    @Override
		    public String toString() 
		    { 
		        return "Circle color is " + super.color + "and area is : " + area(); 
		    } 
		} 
		class Rectangle extends Shape
		{ 
		    double length; 
		    double width; 
		    public Rectangle(String color,double length,double width) 
		    { 
		        super(color); 
		        System.out.println("Rectangle constructor called"); 
		        this.length = length; 
		        this.width = width; 
		    } 
		    @Override
		    double area() 
		    { 
		        return length*width; 
		    } 
		    @Override
		    public String toString() 
		    { 
		        return "Rectangle color is " + super.color +  
		                           "and area is : " + area(); 
		    } 
		} 
		public class Abstraction  
		{ 
		    public static void main(String[] args) 
		    { 
		        Shape s1 = new Circle("Red", 2.2); 
		        Shape s2 = new Rectangle("Yellow", 2, 4);
		        System.out.println(s1.toString()); 
		        System.out.println(s2.toString()); 
		    } 
		}

	
Inheritance:

package Corejavaphase1;

		class Bicycle  
		{ 
		    public int gear; 
		    public int speed; 
		    public Bicycle(int gear, int speed) 
		    { 
		        this.gear = gear; 
		        this.speed = speed; 
		    } 
		    public void applyBrake(int decrement) 
		    { 
		        speed -= decrement; 
		    } 
		    public void speedUp(int increment) 
		    { 
		        speed += increment; 
		    }  
		    public String toString()  
		    { 
		        return("No of gears are " + gear + "\n" + "speed of bicycle is " + speed); 
		    }  
		} 
		class MountainBike extends Bicycle  
		{ 
		    public int seatHeight; 
		    public MountainBike(int gear,int speed,int startHeight) 
		    {  
		        super(gear, speed); 
		        seatHeight = startHeight; 
		    }  
		    public void setHeight(int newValue) 
		    { 
		        seatHeight = newValue; 
		    } 
		    @Override
		    public String toString() 
		    { 
		        return (super.toString()+ 
		                "\nseat height is "+seatHeight); 
		    } 
		}
		public class Inheritance  {
			public static void main(String args[])  
		    { 
		        MountainBike mb = new MountainBike(3, 100, 25); 
		        System.out.println(mb.toString());
		    }
		}

	Encapsulation:
package Corejavaphase1;


		 class Encapsulation{
			    private String Name; 
			    private int Roll; 
			    private int Age;
			    public int getAge()  
			    { 
			      return Age; 
			    } 
			    public String getName()  
			    { 
			      return Name; 
			    } 
			    public int getRoll()  
			    { 
			       return Roll; 
			    } 
			    public void setAge( int newAge) 
			    { 
			      Age = newAge; 
			    } 
			    public void setName(String newName) 
			    { 
			      Name = newName; 
			    } 
			    public void setRoll( int newRoll)  
			    { 
			      Roll = newRoll; 
			    } 
			}
			public class Encapsulate
			{     
				public static void main (String[] args)  
			{ 
			    Encapsulation obj = new Encapsulation(); 
			    obj.setName("Nandha"); 
			    obj.setAge(23); 
			    obj.setRoll(52); 
			    System.out.println("My name: " + obj.getName()); 
			    System.out.println("My age: " + obj.getAge()); 
			    System.out.println("My roll: " + obj.getRoll());      
			} 
			    
			    }

	polymorphism:

package Corejavaphase1;

public class Polymorphism {
			public int sum(int x,int y) {
				return(x+y);
					}
		public int sum (int x,int y,int z) {
			return (x+y+z);
			
		}
		public double sum(double x,double y) {
			return(x+y);
			
		}
			public static void main(String[] args) {
			Polymorphism s1=new Polymorphism();
			
			System.out.println(s1.sum(5.1, 8.9));
			System.out.println(s1.sum(10, 8, 12));
			System.out.println(s1.sum(1, 3));
			}

		}

pillars:

             package Corejavaphase1;

public class PillarsOfOOps {

	
			String name;
			String bread;
			int age;
			String color;
		 public PillarsOfOOps(String name,String bread,int age, String color) {
			 this.name=name ;
			 this.bread=bread;
			 this.age=age;
			 this.color=color;
			 
		 }
			public String getName() {
				return name;
				
			}
			public String getBread() {
				return bread;
				
			}

			public String getColor() {
				return color;
				
			}
			public int getAge() {
				return age;
				
			}
			@Override
			public String toString () {
				return("Hi, my name is "+this.getName()+"\n My Bread is "+this.getBread()+ "\n My age is "+this.getAge()+ "\n I am "+this.getColor()+" color");
			}
			public static void main(String[] args) {
				
			PillarsOfOOps p = new PillarsOfOOps("NandhaKumar","Brown",5,"Black");
			System.out.println(p.toString());

			}

		}



